<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\Buy_dialog.java"
            line="28"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\LoginActivity.java"
            line="24"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="72"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MessageReceiver.java"
            line="62"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="30"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="143"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\PlayService.java"
            line="45"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\Setting.java"
            line="26"
            column="12"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="`SharedPreferences.edit()` without a corresponding `commit()` or `apply()` call"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  editor = pref.edit();"
        errorLine2="           ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\Userfunction.java"
            line="27"
            column="12"/>
    </issue>

    <issue
        id="CutPasteId"
        severity="Warning"
        message="The id `R.id.col1` has already been looked up in this method; possible cut &amp; paste error?"
        category="Correctness"
        priority="6"
        summary="Likely cut &amp; paste mistakes"
        explanation="This lint check looks for cases where you have cut &amp; pasted calls to `findViewById` but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields `prev` and `next` and you cut &amp; pasted `findViewById(R.id.prev)` and forgot to update the second initialization to `R.id.next`."
        errorLine1="     TextView tv = (TextView) tr.findViewById(R.id.col1);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="515"
            column="31"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="485"
            column="32"/>
    </issue>

    <issue
        id="CutPasteId"
        severity="Warning"
        message="The id `R.id.col4` has already been looked up in this method; possible cut &amp; paste error?"
        category="Correctness"
        priority="6"
        summary="Likely cut &amp; paste mistakes"
        explanation="This lint check looks for cases where you have cut &amp; pasted calls to `findViewById` but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields `prev` and `next` and you cut &amp; pasted `findViewById(R.id.prev)` and forgot to update the second initialization to `R.id.next`."
        errorLine1="     TextView tv2 = (TextView) tr.findViewById(R.id.col4);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="516"
            column="32"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="486"
            column="33"/>
    </issue>

    <issue
        id="CutPasteId"
        severity="Warning"
        message="The id `R.id.col2` has already been looked up in this method; possible cut &amp; paste error?"
        category="Correctness"
        priority="6"
        summary="Likely cut &amp; paste mistakes"
        explanation="This lint check looks for cases where you have cut &amp; pasted calls to `findViewById` but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields `prev` and `next` and you cut &amp; pasted `findViewById(R.id.prev)` and forgot to update the second initialization to `R.id.next`."
        errorLine1="     TextView tv_notes = (TextView) tr.findViewById(R.id.col2);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="524"
            column="37"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="487"
            column="38"/>
    </issue>

    <issue
        id="CutPasteId"
        severity="Warning"
        message="The id `R.id.col5` has already been looked up in this method; possible cut &amp; paste error?"
        category="Correctness"
        priority="6"
        summary="Likely cut &amp; paste mistakes"
        explanation="This lint check looks for cases where you have cut &amp; pasted calls to `findViewById` but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields `prev` and `next` and you cut &amp; pasted `findViewById(R.id.prev)` and forgot to update the second initialization to `R.id.next`."
        errorLine1="     TextView tv2_notes = (TextView) tr.findViewById(R.id.col5);"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="525"
            column="38"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="488"
            column="39"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.nio.file`. Referenced from `okio.Okio`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.

When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.

This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="C:\Users\1\.gradle\caches\modules-2\files-2.1\com.squareup.okio\okio\1.9.0\f824591a0016efbaeddb8300bee54832a1398cfa\okio-1.9.0.jar"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 19"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\build.gradle"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="   tr = (TableRow) inflater1.inflate(R.layout.tabl_row, null);"
        errorLine2="                                                        ~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="484"
            column="57"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="         tr = (TableRow) inflater.inflate(R.layout.tabl_row, null);"
        errorLine2="                                                             ~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="505"
            column="62"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="    tr2 = (TableRow) inflate.inflate(R.layout.tabl2_row, null);"
        errorLine2="                                                         ~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="566"
            column="58"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:support-v4 than 21.0.+ is available: 25.3.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1=" compile &apos;com.android.support:support-v4:21.0.+&apos;"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\build.gradle"
            line="37"
            column="2"/>
    </issue>

    <issue
        id="GradleDynamicVersion"
        severity="Warning"
        message="Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:support-v4:21.0.+)"
        category="Correctness"
        priority="4"
        summary="Gradle Dynamic Version"
        explanation="Using `+` in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)"
        errorLine1=" compile &apos;com.android.support:support-v4:21.0.+&apos;"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\build.gradle"
            line="37"
            column="2"/>
    </issue>

    <issue
        id="ExportedReceiver"
        severity="Warning"
        message="Exported receiver does not require permission"
        category="Security"
        priority="5"
        summary="Receiver does not require permission"
        explanation="Exported receivers (receivers which either set `exported=true` or contain an intent-filter and do not specify `exported=false`) should define a permission that an entity must have in order to launch the receiver or bind to it. Without this, any application can use this receiver."
        errorLine1="  &lt;receiver"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\AndroidManifest.xml"
            line="15"
            column="3"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_alignParentRight`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="53"
            column="4"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_alignParentRight`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="79"
            column="4"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_alignParentRight`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="      android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="81"
            column="7"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.colorPrimary` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;colorPrimary&quot;>#00a9ff&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\colors.xml"
            line="4"
            column="12"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\colors.xml"
            line="4"
            column="9"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.colorPrimaryDark` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;colorPrimaryDark&quot;>#303F9F&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\colors.xml"
            line="5"
            column="12"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\colors.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.colorAccent` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;colorAccent&quot;>#004081&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\colors.xml"
            line="6"
            column="12"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\colors.xml"
            line="6"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.upbutt` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;color name=&quot;upbutt&quot;>#ffffff&lt;/color>"
        errorLine2="        ~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\colors.xml"
            line="9"
            column="9"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\colors.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.ic_launcher` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\ic_launcher.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\ic_launcher.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\ic_launcher.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\ic_launcher.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.hello_world` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\strings.xml"
            line="5"
            column="13"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.mes_z_del` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;mes_z_del&quot;>Выберите действие для заявки&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values\strings.xml"
            line="10"
            column="10"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\values-v21\strings.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `LinearLayout` parent is possibly useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="142"
            column="5"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `RelativeLayout` parent is possibly useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="  &lt;LinearLayout"
        errorLine2="  ^"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\setting.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `RelativeLayout` parent is possibly useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="  &lt;LinearLayout"
        errorLine2="  ^"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\user_function.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Notification icons must be entirely white"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\srab_down.png"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Notification icons must be entirely white"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\srab_up.png"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Notification icons must be entirely white"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\trenddown.png"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Notification icons must be entirely white"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\trendup.png"/>
    </issue>

    <issue
        id="IconDipSize"
        severity="Warning"
        message="The image `launch_screen.png` varies significantly in its density-independent (dip) size across the various density versions: drawable-mdpi\launch_screen.png: 540x540 dp (540x540 px), drawable-hdpi\launch_screen.png: 360x360 dp (540x540 px), drawable-xhdpi\launch_screen.png: 270x270 dp (540x540 px), drawable-xxhdpi\launch_screen.png: 180x180 dp (540x540 px)"
        category="Usability:Icons"
        priority="5"
        summary="Icon density-independent size validation"
        explanation="Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (`dip`) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\launch_screen.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `button.9.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi, drawable-xhdpi, drawable-xxhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\button.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\button.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\button.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\button.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `button_d.9.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi, drawable-xhdpi, drawable-xxhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\button_d.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\button_d.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\button_d.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\button_d.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `button_up.9.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi, drawable-xhdpi, drawable-xxhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\button_up.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\button_up.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\button_up.9.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\button_up.9.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `launch_screen.png` icon has identical contents in the following configuration folders: drawable-hdpi, drawable-mdpi, drawable-xhdpi, drawable-xxhdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xxhdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-xhdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-mdpi\launch_screen.png"/>
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable-hdpi\launch_screen.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/buttongreen.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\buttongreen.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/buttongreenup.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\buttongreenup.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/buttonred.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\buttonred.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/buttonredup.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\buttonredup.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/trenddown.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\trenddown.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/trendup.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\drawable\trendup.png"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src\main\res`: drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="89"
            column="3"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="96"
            column="3"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="111"
            column="3"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="118"
            column="3"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="     &lt;Button"
        errorLine2="     ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="148"
            column="6"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="     &lt;Button"
        errorLine2="     ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="155"
            column="6"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="   &lt;Button"
        errorLine2="   ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\setting.xml"
            line="24"
            column="4"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="   &lt;Button"
        errorLine2="   ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\setting.xml"
            line="31"
            column="4"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\user_function.xml"
            line="23"
            column="3"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="  &lt;Button"
        errorLine2="  ^">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\user_function.xml"
            line="29"
            column="3"/>
    </issue>

    <issue
        id="GoogleAppIndexingWarning"
        severity="Warning"
        message="App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. See issue explanation for more details."
        category="Usability"
        priority="5"
        summary="Missing support for Google App Indexing"
        explanation="Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search."
        url="https://g.co/AppIndexing/AndroidStudio"
        urls="https://g.co/AppIndexing/AndroidStudio"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\AndroidManifest.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="  &lt;EditText"
        errorLine2="  ^"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="21"
            column="3"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="  &lt;EditText"
        errorLine2="  ^"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="36"
            column="3"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="  &lt;EditText"
        errorLine2="  ^"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="52"
            column="3"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/deff83/indexAPI/MainActivity$4#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="252"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/deff83/indexAPI/MainActivity$5#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="272"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1=" &lt;ImageView"
        errorLine2=" ^"
        quickfix="studio,adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="70"
            column="2"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="     text_balance.setText(price_intent_string + &quot;$&quot; + ostatok);"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="324"
            column="27"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="       but.setText(name + &quot;\n&quot; + price);"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\MainActivity.java"
            line="427"
            column="20"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  price_minuse.setText(minuses.toString() + &quot;   (&quot; + price_minus + &quot;)&quot;);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="105"
            column="24"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Number formatting does not take into account locale settings. Consider using `String.format` instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  price_minuse.setText(minuses.toString() + &quot;   (&quot; + price_minus + &quot;)&quot;);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="105"
            column="24"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  price_pluse.setText(pluses.toString() + &quot;   (&quot; + price_plus + &quot;)&quot;);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="117"
            column="23"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Number formatting does not take into account locale settings. Consider using `String.format` instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  price_pluse.setText(pluses.toString() + &quot;   (&quot; + price_plus + &quot;)&quot;);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="117"
            column="23"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`
* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.
* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.
* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="   price_edit2.setText(&quot;999.9&quot;);"
        errorLine2="                       ~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\java\com\deff83\indexAPI\OpovActivity.java"
            line="140"
            column="24"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Продать&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:textOff=&quot;Продать&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="26"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Купить&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:textOn=&quot;Купить&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="27"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;мин разрыв&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;мин разрыв&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="94"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;-----&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;-----&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="101"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Отмена&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Отмена&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="116"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Отправить&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Отправить&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="123"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;wmid&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;wmid&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="20"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Логин&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Логин&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="34"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Пароль&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Пароль&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="50"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Вход&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Вход&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\login_activ.xml"
            line="66"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Выполните свайп вниз&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Выполните свайп вниз&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="47"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Купить&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="      android:text=&quot;Купить&quot;/>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="153"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Продать&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="      android:text=&quot;Продать&quot;/>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="160"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Старт&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Старт&quot;/>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\setting.xml"
            line="29"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Стоп&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Стоп&quot;/>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\setting.xml"
            line="36"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Убрать все заявки&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Убрать все заявки&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\user_function.xml"
            line="28"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Убрать заявку&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Убрать заявку&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\user_function.xml"
            line="34"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="53"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\buy_dialog.xml"
            line="79"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\main.xml"
            line="81"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\opoveshenia.xml"
            line="28"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\opoveshenia.xml"
            line="35"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\opoveshenia.xml"
            line="46"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="   android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\opoveshenia.xml"
            line="52"
            column="4"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="9"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="16"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="23"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="30"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="37"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl2_row.xml"
            line="44"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="9"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="16"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="23"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="30"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="37"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="  android:gravity = &quot;right&quot;"
        errorLine2="                     ~~~~~">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\res\layout\tabl_row.xml"
            line="44"
            column="22"/>
    </issue>

    <issue
        id="RtlEnabled"
        severity="Warning"
        message="The project references RTL attributes, but does not explicitly enable or disable RTL support with `android:supportsRtl` in the manifest"
        category="Internationalization:Bidirectional Text"
        priority="3"
        summary="Using RTL attributes without enabling RTL support"
        explanation="To enable right-to-left support, when running on API 17 and higher, you must set the `android:supportsRtl` attribute in the manifest `&lt;application>` element.

If you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.">
        <location
            file="C:\Users\1\Documents\GitHub\Index\app\src\main\AndroidManifest.xml"/>
    </issue>

</issues>
